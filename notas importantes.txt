tipos de datos que se pueden manejar

numerico  : enteros (int ) ,  flotante (float)  , complejos

textos ( strings)

booleanos : true  / false


operadores que se utilizan

aritmeticos : + - %(modulo) **(exponente)  //(division entera)

comparacion : ==  < ,  >  , <= , >= , !=

logicos: and , or , not

asginacion : =
nombre = leo


python es case sensitive (distingue entre ayusculas y minusculas)

lower - > trasnforma uan cadena a minuscula
upper -> transforma uan cadena en mayuscula

print("hola" , end= "") -> con el end="" no hace salto de lineas
el argumento **`end` **te permite modificar este comportamiento. Puedes especificar qué carácter (o cadena) deseas que sea colocado al final de la salida en lugar del salto de línea predeterminado.


1. `f` antes de las comillas indica que es una **f-string**.
2. `"valor de la variable {i}"` es la cadena de texto.
    - `valor de la variable` es texto fijo que se imprimirá tal cual.
    - `{i}` indica que se va a insertar el valor de la variable `i` dentro de este texto.

 for i in range(5):
    print(f"valor de la variable {i}")


def devuelve_ciudades(*ciudades): un *antes de un parametro  le estamos indicando que vamos a recibir un numeor indeterminado de elemntos y esos argumentos lo va recibir en forma de tupla




CONSTRUCTOR -> metodo especial que le da un estado inical de un objeto que pertenezca a uan clase


principio de sustitucion --> es siempre un/a                  isintance()



📘 Definiciones de Programación Orientada a Objetos (POO)
✅ Clase
Modelo donde se definen las características comunes (atributos y comportamientos) de un grupo de objetos.
Ejemplo: Una clase Perro puede tener atributos como raza y color, y métodos como ladrar().

✅ Ejemplar / Instancia / Objeto de clase
Es una instancia concreta de una clase, es decir, un objeto que pertenece a esa clase y tiene valores específicos.
Ejemplo: mi_perro = Perro("Labrador", "Negro") es un objeto de la clase Perro.

✅ Modularización
Una aplicación compleja debe estar formada por varias clases o módulos.
La modularización permite dividir el programa en partes más pequeñas, reutilizables y fáciles de mantener.
✔ Mejora la organización del código y facilita su reutilización.

✅ Encapsulamiento
Es un principio que consiste en ocultar los detalles internos de una clase y permitir el acceso solo a través de métodos públicos.
✔ Evita que otras clases modifiquen directamente el funcionamiento interno.
Ejemplo: Puedes consultar el saldo de una cuenta bancaria con un método, sin saber cómo se calcula internamente.

✅ Métodos de acceso
Son métodos que permiten leer o modificar atributos privados de una clase de forma controlada.
✔ Ayudan a proteger los datos internos del objeto.
Ejemplo: get_nombre() para obtener un valor y set_nombre(valor) para modificarlo.

Polimorfismo en Programación Orientada a Objetos
✅ ¿Qué es el polimorfismo?
El polimorfismo es cuando varias clases diferentes pueden usar un mismo método, pero cada una lo hace a su manera.

📌 Significa “muchas formas” (del griego poly = muchos, morph = forma).

ejemplo real sencillo
Todas estas clases tienen un método llamado hacer_sonido(), pero cada una lo hace diferente:


class Perro:
    def hacer_sonido(self):
        print("Guau!")

class Gato:
    def hacer_sonido(self):
        print("Miau!")

class Vaca:
    def hacer_sonido(self):
        print("Muu!")
Y luego puedes hacer esto:


def reproducir_sonido(animal):
    animal.hacer_sonido()

reproducir_sonido(Perro())  # Guau!
reproducir_sonido(Gato())   # Miau!
reproducir_sonido(Vaca())   # Muu!
💡 Aunque el método se llama igual (hacer_sonido), cada clase lo implementa diferente. ¡Eso es polimorfismo!

🧠 Piénsalo así:
“Diferentes objetos responden al mismo mensaje (método), pero con comportamientos distintos.”

🛠️ ¿Para qué sirve?
Para escribir código más flexible y reutilizable

Para trabajar con listas de objetos distintos que se comportan de manera coherente

Para reducir código repetido








Herencia en Python con super() e isinstance()
👨‍🏫 Clase Persona
Es la clase padre (base).
Define atributos comunes: nombre, edad, lugar_residencia.
Tiene un método descripcion() para mostrar esa info.

👨‍💼 Clase Empleado(Persona)
Es la clase hija.
Hereda todo de Persona, pero además agrega:

salario

antiguedad

Usa super() para conectar con la clase padre y no repetir código.

También redefine (sobrescribe) el método descripcion() para añadir más datos.

🧪 isinstance(objeto, Clase)
Sirve para saber si un objeto es instancia de cierta clase.


isinstance(antonio, Empleado)  # ✅ True
isinstance(antonio, Persona)   # ✅ True también (porque Empleado hereda de Persona)
👉 ¡Un Empleado es también una Persona!

🧠 Piénsalo así:
“Un empleado es una persona, pero una persona no siempre es un empleado.”




🧩 ¿Qué es un módulo?
Un módulo es simplemente un archivo .py que contiene funciones, clases o variables que puedes reutilizar en otros programas.

🔧 Sirve para:

Organizar mejor tu código

Evitar repetir código

 📦 ¿Qué es un paquete?
Un paquete es una carpeta que contiene varios módulos.
Para que Python la reconozca como paquete, debe tener un archivo llamado __init__.py (aunque en versiones modernas ya no es obligatorio, sigue siendo buena práctica).

ejempllo de un paquete distribuido

setup.py
from setuptools import setup

setup(
    name='repaso',
    version='1.0',
    description='Repaso de Python',
    author='<LEONARDO ALVAREZ VALENCIA>',
    author_email='<Leonardoalvarez1118@gmail.com>',
    packages=['calculos','calculos.redondeo_potencia']
)


Para hacer un paquete distribuible usamos:
  python nombre_del_paquete.py sdist

Para instalarlo, hay que ir a la ruta del directorio `dist/` y ejecutar:
  pip3 install nombre_del_paquete.tar.gz

Para desinstalarlo, usamos:
  pip3 uninstall nombre_paquete
🛠️ Detalles útiles:
sdist (source distribution): crea un paquete fuente comprimido en un .tar.gz, ubicado dentro de una carpeta llamada dist/.

Es importante tener un archivo setup.py bien configurado en el paquete.

También podés usar pip install . desde la raíz del proyecto si tiene setup.py.